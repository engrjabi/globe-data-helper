{"version":3,"sources":["avatarLink.js","utils.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["useAvatarLinkStyles","makeStyles","root","margin","color","width","height","AvatarLink","href","children","style","classes","Avatar","className","linkGenerator","number","body","globeNumber","globeKeywords","FIFTEEN_DAYS_DATA","ONE_GB_DATA","GO_SAKTO_STATUS","BALANCE","REWARD_STATUS","useStyles","minHeight","alignContent","textDecoration","App","Grid","container","justify","alignItems","backgroundColor","teal","deepOrange","deepPurple","blueGrey","amber","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8395b1a.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst useAvatarLinkStyles = makeStyles({\n  root: {\n    margin: 10,\n    color: \"#fff\",\n    width: \"4.375rem\",\n    height: \"4.375rem\"\n  }\n});\n\nexport const AvatarLink = ({ href, children, style }) => {\n  const classes = useAvatarLinkStyles();\n\n  return (\n    <div>\n      <a href={href}>\n        <Avatar className={classes.root} style={style}>\n          {children}\n        </Avatar>\n      </a>\n    </div>\n  );\n};\n","export const linkGenerator = (number, body) => `sms:${number}?body=${body}`;\n","export const globeNumber = 8080;\nexport const globeKeywords = {\n  FIFTEEN_DAYS_DATA: \"GOSURFBE34\",\n  ONE_GB_DATA: \"GOTSCOMBOKEA37\",\n  GO_SAKTO_STATUS: \"GoSAKTO STATUS\",\n  BALANCE: \"BAL\",\n  REWARD_STATUS: \"REWARD STATUS\"\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  deepOrange,\n  deepPurple,\n  blueGrey,\n  teal,\n  amber\n} from \"@material-ui/core/colors\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AvatarLink } from \"./avatarLink\";\nimport { linkGenerator } from \"./utils\";\nimport { globeKeywords, globeNumber } from \"./constants\";\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    alignContent: \"center\",\n    \"& a\": {\n      textDecoration: \"none\"\n    }\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      className={classes.root}\n    >\n      <AvatarLink\n        href={linkGenerator(globeNumber, globeKeywords.FIFTEEN_DAYS_DATA)}\n        style={{\n          backgroundColor: teal[500]\n        }}\n      >\n        15D\n      </AvatarLink>\n\n      <AvatarLink\n        href={linkGenerator(globeNumber, globeKeywords.ONE_GB_DATA)}\n        style={{\n          backgroundColor: deepOrange[500]\n        }}\n      >\n        1GB\n      </AvatarLink>\n\n      <AvatarLink\n        href={linkGenerator(globeNumber, globeKeywords.GO_SAKTO_STATUS)}\n        style={{\n          backgroundColor: deepPurple[500]\n        }}\n      >\n        GBL\n      </AvatarLink>\n\n      <AvatarLink\n        href={linkGenerator(222, globeKeywords.BALANCE)}\n        style={{\n          backgroundColor: blueGrey[500]\n        }}\n      >\n        BL\n      </AvatarLink>\n\n      <AvatarLink\n        href={linkGenerator(globeNumber, globeKeywords.REWARD_STATUS)}\n        style={{\n          backgroundColor: amber[500]\n        }}\n      >\n        RS\n      </AvatarLink>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}